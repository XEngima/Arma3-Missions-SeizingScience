/*
 * Name:	AiRescueChopperPilot
 * Date:	2017-06-28
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Models an AI rescue chopper pilot.
 */
 
using Sqx.Events;
using Mission.Shared.Types;
 
namespace Mission.Server.Types
{
	public class AiRescueChopperPilot : IRescueChopperPilot
	{
		private fields ["_mEventListener" as EventListener, "_mPilotObj" as Object, "_mChopperObj" as Object, "_mWaitingPos" as Array];
		private fields ["_mState" as RescueChopperState, "_mStateIsNew" as Boolean, "_mExtractionPos" as Array];
	
		// Creates an AiRescueChopperPilot object and starts its simulation.
		// _pilotObj:   The pilot unit.
		// _chopperObj: The helicopter unit.
		public constructor {
			params ["_eventListener" as EventListener, "_pilotObj" as Object, "_chopperObj" as Object, "_waitingPos" as Array];
			
			if (_eventListener != classNull) then {
				// TODO: Fixa så att man kan skriva funktionen direkt. Nu måste man stoppa in den i {}.
				// Och vad 17 kommer färgen på "call" ifrån...??
				[RadioCall.RescueChopperMoveOut, { _this call _self.OnRadioMoveOut }, _self] call _mEventListener.AddEvent;
				[RadioCall.RescueChopperSetPickupPoint, { _this call _self.OnRadioSetPickupPoint }, _self] call _mEventListener.AddEvent;
			};
			
			_mPilotObj = _pilotObj;
			_mChopperObj = _chopperObj;
			_mWaitingPos = _waitingPos;
			_mStateIsNew = false;
			
			_self.IsBusy = false;
			
			_mState = RescueChopperState.Idle;
			[] spawn _self.RunSimulation;
		};
		
		private static method OnRadioMoveOut {
			params ["_owner" as AiRescueChopperPilot, "_params" as Array];
			call _owner.MoveToWaitingPoint;
		};
		
		private static method OnRadioSetPickupPoint {
			params ["_owner" as AiRescueChopperPilot, "_params" as Array];
			_params params ["_sender" as Any, "_point" as ExtractionPoint];
			
			[_point] call _owner.MoveToWaitingPoint;			
		};
		
		// Deletes all waypoints for the chopper's group.
		private method DeleteAllWaypoints {
			{
				deleteWaypoint [group _mPilotObj, 0];
			} foreach waypoints group _mPilotObj;
		};
		
		public property Boolean IsBusy { get; private set; };
		
		private method SetState {
			params ["_state" as RescueChopperState];
			
			call _self.DeleteAllWaypoints;
			
			_mState = _state;
			_mStateIsNew = true;
		};
		
		// Starts the simulation, i.e. gets the AI pilot to respond to given actions.
		private method RunSimulation {
			private ["_isLanding" as Boolean];
			
			_isLanding = false;
		
			while { alive _mPilotObj && canMove _mChopperObj } do
			{
				if (_mState == RescueChopperState.MovingOut) then
				{
					if (_mStateIsNew) then {
						(group _mPilotObj) addWaypoint [_mWaitingPos, 0];
					};
					
					if (_mChopperObj distance2D _mWaitingPos < 150) then {
						_mState = RescueChopperState.Idle;
						_self.IsBusy = false;
					};
				};
				
				if (_mState == RescueChopperState.MovingToExtractionZone) then {
					if (_mStateIsNew) then {
						(group _mPilotObj) addWaypoint [_mExtractionPos, 0];
						_isLanding = false;
					};
				
					if (_mChopperObj distance2D (_mExtractionPos) < 150 && !_isLanding) then {
						_isLanding = true;
						_mChopperObj land "LAND";
					};
					
					if ((getPosATL _mChopperObj) select 2 < 2 && _isLanding) then {
						_mState = RescueChopperState.Idle;
						_self.IsBusy = false;
					};
				};
				
				_mStateIsNew = false;
				sleep 1;
			};
		};
		
		private method DoBoardChopper {
			_mPilotObj assignAsDriver _mChopperObj;
			[_mPilotObj] orderGetIn true;
			
			waitUntil { vehicle _mPilotObj == _mChopperObj };
			_self.IsBusy = false;
		};
		
		// Orders the pilot to board the chopper.
		public method BoardChopper {
			_self.IsBusy = true;
			[] spawn _self.DoBoardChopper;
		};
		
		// Moves the rescue chopper to the waiting zone outside the target area.
		public method MoveToWaitingPoint {
			_self.IsBusy = true;
			[RescueChopperState.MovingOut] call _self.SetState;
		};
		
		// Moves the rescue chopper to the extraction zone.
		public method LandAtExtractionZone {
			params ["_point" as ExtractionPoint];
			private ["_zone" as ExtractionZone];
			
			_zone = [_point] call gExtractionZoneHandler.GetZone;
			
			_mExtractionPos = _zone.Position;
			[RescueChopperState.MovingToExtractionZone] call _self.SetState;
		};
		
		// Orders the rescue chopper to return to base.
		public method ReturnToBase {
		};
	};
};
